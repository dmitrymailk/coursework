{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"active_learning_labeling","provenance":[],"collapsed_sections":[],"mount_file_id":"1KThIckzC5PkvFCPFMCtYuU58NkXYltJs","authorship_tag":"ABX9TyNGTt5PmmJf31cGVRZ+B22s"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"15bcead05fa04640bd07b955d58bf0ef":{"model_module":"@jupyter-widgets/controls","model_name":"GridBoxModel","state":{"_view_name":"GridBoxView","_dom_classes":[],"_model_name":"GridBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_793ee45467fb483485ccdab13215323e","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e7cfe1b6378c4fa99e8cf9cb6bc47b10","IPY_MODEL_1116ac6eb1a74f978804caef0974cd78","IPY_MODEL_f950836449d04bbaa0a2f6276a651639","IPY_MODEL_7aa0508e86214167945120b5b5e34eca","IPY_MODEL_57a61fdcabf047bc9d7ae56cf3b183e2"]}},"793ee45467fb483485ccdab13215323e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":"repeat(4, 1fr)","right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":"800px","min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":"repeat(4, 1fr)","flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":"300px","min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":"\"widget001 widget001 widget001 widget001\"\n\". . . .\"\n\"widget004 widget002 widget002 widget003\"\n\"widget005 widget005 . .\"","object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e7cfe1b6378c4fa99e8cf9cb6bc47b10":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_bfdd2f3f44b44a69a3e6f6264d3a5856","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"â€‹","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"<p style=\"font-size: 1.3em;padding:16px 32px;\">Example 4</p>","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_db7d62f9cec346d69a4a24e06f85ff00"}},"1116ac6eb1a74f978804caef0974cd78":{"model_module":"@jupyter-widgets/controls","model_name":"ToggleButtonsModel","state":{"_options_labels":["yes","no"],"_view_name":"ToggleButtonsView","style":"IPY_MODEL_956f6c78cbe040749f5c953c93dbb730","_dom_classes":[],"description":"","_model_name":"ToggleButtonsModel","tooltips":[],"index":1,"button_style":"","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"disabled":false,"_view_module_version":"1.5.0","icons":[],"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_7a97c29b0312404ca4dd8ad7b1e6b242"}},"f950836449d04bbaa0a2f6276a651639":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonModel","state":{"_view_name":"ButtonView","style":"IPY_MODEL_5be57728021748638900e7e88acfc8b6","_dom_classes":[],"description":"Next","_model_name":"ButtonModel","button_style":"","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","tooltip":"Next","_view_count":null,"disabled":false,"_view_module_version":"1.5.0","layout":"IPY_MODEL_464226fa3f5f4272b469f99a23e68fc6","_model_module":"@jupyter-widgets/controls","icon":"check"}},"7aa0508e86214167945120b5b5e34eca":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonModel","state":{"_view_name":"ButtonView","style":"IPY_MODEL_dec02cfad49b4dfda9f388e2bbb30ae4","_dom_classes":[],"description":"Prev","_model_name":"ButtonModel","button_style":"","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","tooltip":"Prev","_view_count":null,"disabled":false,"_view_module_version":"1.5.0","layout":"IPY_MODEL_f1abf44e97974ce0850eb4893b6b3635","_model_module":"@jupyter-widgets/controls","icon":"check"}},"57a61fdcabf047bc9d7ae56cf3b183e2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_4cc75a6549614b4a92683026e20fd7cb","_dom_classes":[],"description":"Examples:","_model_name":"FloatProgressModel","bar_style":"info","max":3,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":3,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2cce0604a94d4eb4aba7b13036194da7"}},"bfdd2f3f44b44a69a3e6f6264d3a5856":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"db7d62f9cec346d69a4a24e06f85ff00":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":"widget001","grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"956f6c78cbe040749f5c953c93dbb730":{"model_module":"@jupyter-widgets/controls","model_name":"ToggleButtonsStyleModel","state":{"_view_name":"StyleView","button_width":"","_model_name":"ToggleButtonsStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"font_weight":"","_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"7a97c29b0312404ca4dd8ad7b1e6b242":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":"widget002","grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5be57728021748638900e7e88acfc8b6":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonStyleModel","state":{"_view_name":"StyleView","_model_name":"ButtonStyleModel","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"button_color":null,"font_weight":"","_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"464226fa3f5f4272b469f99a23e68fc6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":"widget003","grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"dec02cfad49b4dfda9f388e2bbb30ae4":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonStyleModel","state":{"_view_name":"StyleView","_model_name":"ButtonStyleModel","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"button_color":null,"font_weight":"","_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"f1abf44e97974ce0850eb4893b6b3635":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":"widget004","grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4cc75a6549614b4a92683026e20fd7cb":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":"green","_model_module":"@jupyter-widgets/controls"}},"2cce0604a94d4eb4aba7b13036194da7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":"widget005","grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"30afbe5d42ea4e0ebfd11b678888edef":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_36eff197967248f4b40b5ac2055b097d","_model_module":"@jupyter-widgets/output"}},"36eff197967248f4b40b5ac2055b097d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i0C1OLZr8J2p","executionInfo":{"status":"ok","timestamp":1619789667579,"user_tz":-180,"elapsed":624,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"d19f5fec-2f2c-4cab-b0a1-ec865c9bb73c"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# #!ls \"/content/drive/My Drive/collab_sandbox\"\n","%cd drive/MyDrive/collab_sandbox/NER/ner_tenses_recognition/active_learning/\n","!ls"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/collab_sandbox/NER/ner_tenses_recognition/active_learning\n","active_learning_classif_meaningful_sentences\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-1uyPZBj8x-y","executionInfo":{"status":"ok","timestamp":1619789032602,"user_tz":-180,"elapsed":644,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"f912e444-3d57-49ec-d656-a0e0cf5cfd00"},"source":["!ls"],"execution_count":26,"outputs":[{"output_type":"stream","text":["active_learning\n","active_learning_classif_meaningful_sentences\n","advanced_tutorial_crf_lstm.ipynb\n","best-val-model-86.pt\n","datasets\n","index.html\n","logs\n","meaningful_classif\n","med_gen_4_23_21_medium_sentences_dataset.csv\n","med_gen_4_23_21_medium_sentences_dataset_labeled.csv\n","medium_articles\n","medium_sentences_dataset-2-22-21.csv\n","medium_sentences_dataset-2-22-21.gsheet\n","medium_sentences_dataset_labeled.csv\n","medium_sentences_dataset_labeled.gsheet\n","medium_sentenses_labeled_all__4_23_21_80479.csv\n","medium_sentenses_labeled_all__4_23_21_80511.csv\n","my_nerda\n","NER_A1_tenses.ipynb\n","NERDA.ipynb\n","NERDA_models\n","NER_SANDBOX.ipynb\n","NER_tenses\n","NER_tenses_pytorch_lighting_catalyst\n","ner_tenses_recognition_conll_type.ipynb\n","NER_tenses_tinkoff\n","ner-test.csv\n","results\n","runs\n","spacy_ner\n","spacy_recognition\n","spacy_textcat\n","Token_classification.ipynb\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YgI5ovzowzTn"},"source":["https://superintendent.readthedocs.io/en/latest/examples/labelling-text.html\n","\n","https://www.aclweb.org/anthology/P19-1401.pdf\n","\n","https://streamlit.io/\n"]},{"cell_type":"markdown","metadata":{"id":"IJDkJHt_68nM"},"source":["# Python widgets"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334,"referenced_widgets":["15bcead05fa04640bd07b955d58bf0ef","793ee45467fb483485ccdab13215323e","e7cfe1b6378c4fa99e8cf9cb6bc47b10","1116ac6eb1a74f978804caef0974cd78","f950836449d04bbaa0a2f6276a651639","7aa0508e86214167945120b5b5e34eca","57a61fdcabf047bc9d7ae56cf3b183e2","bfdd2f3f44b44a69a3e6f6264d3a5856","db7d62f9cec346d69a4a24e06f85ff00","956f6c78cbe040749f5c953c93dbb730","7a97c29b0312404ca4dd8ad7b1e6b242","5be57728021748638900e7e88acfc8b6","464226fa3f5f4272b469f99a23e68fc6","dec02cfad49b4dfda9f388e2bbb30ae4","f1abf44e97974ce0850eb4893b6b3635","4cc75a6549614b4a92683026e20fd7cb","2cce0604a94d4eb4aba7b13036194da7","30afbe5d42ea4e0ebfd11b678888edef","36eff197967248f4b40b5ac2055b097d"]},"id":"5u4bNHAXzvZC","executionInfo":{"status":"ok","timestamp":1619788321909,"user_tz":-180,"elapsed":1079,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"6b440103-3772-42d1-d17e-a3160483a9da"},"source":["from ipywidgets import GridspecLayout\n","from IPython.display import clear_output\n","import ipywidgets as widgets\n","from IPython.display import display\n","import pandas as pd\n","import os\n","import time\n","\n","\n","class ExampleSentence():\n","    def __init__(self, \n","                 examples=None,\n","                 output_file=None,\n","                 dirname='./'\n","                 ):\n","      assert output_file != None, \"output filename is None\"\n","      # assert not output_file in os.listdir(f'{dirname}'), \"File with this name already exists, be careful\"\n","      \n","      self.output_file = output_file\n","      self.output_path = None\n","      self.dirname = dirname\n","\n","      self.examples = examples\n","      self.current_elem_position = 0\n","      self.examples_len = len(examples) - 1\n","      self.current_value = \"yes\"\n","      self.current_example = examples[0]\n","      \n","      self.labeled_examples = examples\n","      self.labels = [self.current_value for _ in examples]\n","      ### elements\n","      self.progress = None\n","      self.toggle_buttons = None\n","      self.example_text = None\n","      self.next_button = None\n","      self.prev_button = None\n","      self.output = None\n","      self.grid = GridspecLayout(4, 4, width='800px', height='300px')\n","      ###\n","      self.add_elements()\n","      \n","      self.setup()\n","    def setup(self):\n","      self.toggle_buttons.observe(self.on_value_change, names='value',) \n","      self.next_button.on_click(self.next_example)\n","      self.prev_button.on_click(self.prev_example)\n","\n","      self.grid[:1, :] =  self.example_text\n","      self.grid[2, 1:3] = self.toggle_buttons\n","      self.grid[2, 3:] = self.next_button\n","      self.grid[2, :1] = self.prev_button\n","      self.grid[3, :2] = self.progress\n","\n","      display(self.grid, self.output)\n","\n","    def prev_example(self, some):\n","      if self.current_elem_position > 0:\n","        self.current_elem_position -= 1\n","        pos = self.current_elem_position\n","        self.progress.value = pos\n","        self.toggle_buttons.value = self.labels[pos]\n","        self.current_example = self.labeled_examples[pos]\n","        self.set_html_text(self.current_example)\n","\n","    \n","    def next_example(self, some):\n","      if self.current_elem_position < self.examples_len:\n","        self.labels[self.current_elem_position] = self.current_value\n","        # print(self.labels)\n","        self.current_elem_position += 1\n","        self.progress.value = self.current_elem_position\n","        self.current_example = self.examples[self.current_elem_position]\n","        self.toggle_buttons.value = 'yes'\n","        self.set_html_text(self.current_example)\n","\n","      elif self.current_elem_position == self.examples_len:\n","        self.labels[self.current_elem_position - 1] = self.current_value\n","        self.current_elem_position += 1\n","        print(\"End labeling\")\n","        # TODO: some network train stuff\n","        # create dataframe etc\n","        self.create_dataframe()\n","\n","    def create_dataframe(self):\n","        data = {\n","            'sentence': self.examples,\n","            'label': self.labels\n","        }\n","        df = pd.DataFrame(data=data)\n","        timestamp = time.ctime()\n","        time_uniqueid = time.time()\n","        self.output_path = f\"{self.dirname}{self.output_file}__{timestamp}_{time_uniqueid}.csv\"\n","        df.to_csv(self.output_path, index=False)\n","\n","    def on_value_change(self, change):\n","        with self.output:\n","          self.current_value = change['new']\n","          \n","\n","    def set_html_text(self, text):\n","      render_html = f\"\"\"<p style=\"font-size: 1.3em;padding:16px 32px;\">{text}</p>\"\"\"\n","      self.example_text.value = render_html\n","\n","    def add_elements(self):\n","      self.progress = widgets.FloatProgress(\n","              value=0,\n","              min=0,\n","              max=self.examples_len,\n","              description='Examples:',\n","              bar_style='info',\n","              style={'bar_color': 'green'},\n","              orientation='horizontal'\n","          )\n","      self.toggle_buttons = widgets.ToggleButtons(\n","          options=['yes', 'no'],\n","          description='',\n","          disabled=False,\n","          button_style='',\n","      )\n","      \n","      self.example_text = widgets.HTML(value= \"\")\n","      self.set_html_text(self.current_example)\n","\n","      self.next_button = widgets.Button(\n","          description='Next',\n","          disabled=False,\n","          button_style='',\n","          tooltip='Next',\n","          icon='check' \n","      )\n","      self.prev_button = widgets.Button(\n","          description='Prev',\n","          disabled=False,\n","          button_style='',\n","          tooltip='Prev',\n","          icon='check' \n","      )\n","      self.output = widgets.Output()\n","sentences_for_labeling = ['The Label widget is useful if you', 'Another test sentence', \"Example 3\", \"Example 4\"]\n","tog = ExampleSentence(examples=sentences_for_labeling,\n","                      output_file=\"test_label\",\n","                      dirname='./test_folder/'\n","                      )"],"execution_count":20,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"15bcead05fa04640bd07b955d58bf0ef","version_minor":0,"version_major":2},"text/plain":["GridspecLayout(children=(HTML(value='<p style=\"font-size: 1.3em;padding:16px 32px;\">The Label widget is usefulâ€¦"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"30afbe5d42ea4e0ebfd11b678888edef","version_minor":0,"version_major":2},"text/plain":["Output()"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["End labeling\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xK_sntGE0g1H"},"source":["print(widgets.ToggleButtons.observe.__doc__)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-UgO6TCV04R5"},"source":["print(widgets.ToggleButtons.__doc__)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VnQ2IiI4_Lrt"},"source":["print(widgets.HTML.observe.__doc__)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LQzWdXXhASZ9"},"source":["# Connect labeler and model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":231},"id":"j9fI1GgTD33z","executionInfo":{"status":"error","timestamp":1619790905296,"user_tz":-180,"elapsed":2305,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"24b82143-a81a-4917-91a3-53c8742815cb"},"source":["from sklearn.metrics import accuracy_score as sklearn_accuracy\n","\n","class ClassifModel(nn.Module):\n","    def __init__(self, transformer, n_tags=1, dropout = 0.1):\n","      super(ClassifModel, self).__init__()\n","      transformer_name = transformer.name_or_path\n","      transformer_config = AutoConfig.from_pretrained(transformer_name)\n","      self.transformer = transformer\n","      self.dropout = nn.Dropout(dropout)\n","      dimension  = transformer_config.hidden_size * 2\n","      self.output_1 = nn.Linear(dimension, 1)\n","      # self.output_2 = nn.Linear(dimension, n_tags)\n","      # self.output_3 = nn.Linear(2, n_tags)\n","      \n","      self.batch_norm_1 = torch.nn.BatchNorm1d(transformer_config.hidden_size * 2, )\n","      # self.batch_norm_2 = torch.nn.BatchNorm1d(transformer_config.hidden_size, )\n","\n","      for parameter in self.transformer.parameters():\n","          parameter.requires_grad = False\n","\n","      # print(self.transformer)\n","      for i, m in enumerate(self.transformer.encoder.layer):\n","          if i+1 > 12 - 1:\n","              for parameter in m.parameters():\n","                  parameter.requires_grad = True \n","\n","    def forward(self, \n","                input_ids, \n","                attention_mask,  \n","                ):\n","        transformer_inputs = {\n","            'input_ids': input_ids,\n","            'attention_mask': attention_mask,\n","            }\n","        outputs = self.transformer(**transformer_inputs, output_hidden_states=True)#[0][:, -1]\n","        layer_1_cls = outputs[2][-1][:, 0]\n","        layer_1_sep = outputs[2][-1][:, -1]\n","        outputs_1 = self.batch_norm_1(torch.cat([layer_1_cls, layer_1_sep], axis=-1))\n","        \n","        outputs_1 = self.dropout(outputs_1)\n","        outputs_1 = self.output_1(outputs_1)\n","        outputs_1 = outputs_1.squeeze(1)\n","        return torch.sigmoid(outputs_1)\n","\n","class ClassifExperiment:\n","    def __init__(self, \n","                 model_name = \"roberta-base\", \n","                 dataset = None,\n","                 max_len = 128,\n","                 network = ClassifModel,\n","                 train_batch_size = 4,\n","                 dropout = 0.1,\n","                 grad_clip = 1,\n","                 optimizer_class = AdamW,\n","                 classes = 1,\n","                 target_field = 'Tag',\n","                 feature_field = 'Text'\n","                 ):\n","        self.device = 'cuda' \n","\n","        self.model_name = model_name  \n","        self.dataset = dataset\n","        self.max_len = max_len\n","        self.transformer_model = AutoModel.from_pretrained(model_name)\n","        self.transformer_tokenizer = AutoTokenizer.from_pretrained(model_name, \n","                                                                   do_lower_case=True\n","                                                                   )\n","        self.transformer_config = AutoConfig.from_pretrained(model_name)  \n","        self.network = network(self.transformer_model, classes, dropout = dropout)\n","        self.network.to(self.device)\n","        self.train_losses = []\n","        self.valid_loss = np.nan\n","        self.train_batch_size = train_batch_size\n","        \n","        self.dl_train = None\n","        self.dl_validate = None\n","        self.dataset_validation = None\n","        self.target_field = target_field\n","        self.feature_field = feature_field\n","        self.train_examples = 100\n","        self.best_valid_loss = 10\n","        self.classes = classes\n","\n","        self.scheduler = None\n","        self.scheduler_class = get_linear_schedule_with_warmup\n","        self.optimizer = None\n","        self.criterion = torch.nn.MSELoss()\n","        self.clip = grad_clip\n","        self.optimizer_class = optimizer_class\n","        self.setup()\n","        \n","\n","    def experiment(self, \n","                    epochs = 1,\n","                    warmup_steps = 300,\n","                    learning_rate = 5e-5\n","                   ):\n","        optimizer_parameters = self.network.parameters()\n","\n","        num_train_steps = int(self.train_examples / self.train_batch_size * epochs)\n","        \n","        self.optimizer = self.optimizer_class(optimizer_parameters, lr = learning_rate)\n","        self.scheduler = self.scheduler_class(\n","            self.optimizer, num_warmup_steps = warmup_steps, num_training_steps = num_train_steps\n","        )\n","\n","        train_losses = []\n","        best_parameters = None\n","\n","        for epoch in range(epochs):\n","            \n","            print('\\n Epoch {:} / {:}'.format(epoch + 1, epochs))\n","\n","            train_loss = self.train()\n","            train_losses.append(train_loss)\n","            valid_loss = self.validate()\n","\n","            print(f\"Train Loss = {train_loss} Valid Loss = {valid_loss}\")\n","\n","            if valid_loss < self.best_valid_loss:\n","                best_parameters = self.network.state_dict()            \n","                self.best_valid_loss = valid_loss\n","        print(f\"Best val => {self.best_valid_loss}\")\n","        if best_parameters != None:\n","          self.network.load_state_dict(best_parameters)\n","        \n","\n","        return \"Model trained successfully\"\n","    def setup(self):\n","      dataset_training, dataset_validation = train_test_split(self.dataset, test_size=0.25, random_state=42) \n","      self.dataset_validation = dataset_validation\n","      self.train_examples = len(dataset_training)\n","      self.dl_train = self.create_dataloader(dataset = dataset_training)\n","      self.dl_validate = self.create_dataloader(dataset = dataset_validation)\n","\n","    def create_dataloader(self, dataset):\n","\n","      data_reader = MeaningfullDataset(\n","          dataset = dataset, \n","          tokenizer = self.transformer_tokenizer, \n","          )\n","\n","      data_loader = torch.utils.data.DataLoader(\n","          data_reader, batch_size = self.train_batch_size, num_workers = 0,\n","      )\n","      return data_loader\n","\n","    def train(self,):\n","      self.network.train()    \n","      final_loss = 0.0\n","      \n","      for dl in self.dl_train:\n","\n","          self.optimizer.zero_grad()\n","          # print(dl)\n","          outputs = self.network(\n","              input_ids=dl['input_ids'], \n","              attention_mask=dl['attention_mask'],\n","          )\n","          loss = self.compute_loss(outputs, \n","                              dl.get('label'),\n","                              dl.get('attention_mask'), \n","                              )\n","          # print(loss)\n","          loss.backward()\n","          # torch.nn.utils.clip_grad_norm_(self.network.parameters(), self.clip)\n","          self.optimizer.step()\n","          self.scheduler.step()\n","          final_loss += loss.item()\n","\n","      return final_loss / len(self.dl_train)\n","    def validate(self):\n","        self.network.eval()\n","        final_loss = 0.0\n","\n","        for dl in self.dl_validate:\n","            outputs = self.network(\n","              input_ids=dl['input_ids'], \n","              attention_mask=dl['attention_mask'],\n","            )\n","            loss = self.compute_loss(outputs, \n","                                dl.get('label'),\n","                                dl.get('attention_mask'), \n","                                )\n","            final_loss += loss.item()\n","        \n","        return final_loss / len(self.dl_validate)   \n","    def compute_loss(self, preds, target_tags, masks,):\n","        active_logits = preds.view(-1, self.classes).squeeze(1)\n","        loss = self.criterion(active_logits, target_tags)\n","        return loss\n","    def evaluate_performance(self, dataset=None):\n","        if dataset is None:\n","          dataset = self.dataset_validation\n","        y_true = dataset[self.target_field].tolist()\n","        y_pred = self.predict(dataset)\n","        y_pred_1 = []\n","        for item in y_pred:\n","          y_pred_1.extend(item)\n","\n","        f1 = precision_recall_fscore_support(y_true = y_true,\n","                                             y_pred = y_pred_1,\n","                                             labels = ['yes', 'no'],\n","                                             average=None) #'macro'\n","        # print(f1)\n","        df = list(zip(['no', 'yes'], f1[2]))\n","        df = pd.DataFrame(df, columns = ['Level', 'F1-Score'])    \n","\n","        f1_micro = precision_recall_fscore_support(y_true = y_true,\n","                                             y_pred = y_pred_1,\n","                                             labels = ['yes', 'no'],\n","                                             average='micro') #'micro'\n","        f1_micro = pd.DataFrame({'Level' : ['AVG_MICRO'], 'F1-Score': [f1_micro[2]]})\n","        accuracy = pd.DataFrame({'Level': ['acc'], \"Accuracy\": [sklearn_accuracy(y_true, y_pred_1)]})\n","        df = df.append(f1_micro)\n","        df = df.append(accuracy)\n","      \n","        return df \n","    def predict(self, dataset):\n","      self.network.eval()\n","      dl_test = self.create_dataloader(dataset=dataset)\n","\n","      predictions = []\n","      labels = ['no', 'yes']\n","      amount = 0\n","      with torch.no_grad():\n","        for i, dl in enumerate(dl_test): \n","          outputs = self.network(\n","              input_ids=dl['input_ids'], \n","              attention_mask=dl['attention_mask'],\n","          )   \n","          # print(outputs)\n","          preds = outputs.round().cpu().numpy().tolist()\n","          preds = [labels[int(item)] for item in preds]\n","          predictions.append(preds)\n","      return predictions\n","\n","# my_classif = ClassifExperiment(dataset=meaningful_sentences, dropout = 0.15)"],"execution_count":24,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-d87031c2b167>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0maccuracy_score\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msklearn_accuracy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mclass\u001b[0m \u001b[0mClassifModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModule\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransformer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_tags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdropout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m       \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mClassifModel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'nn' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"wRY5odwvM3t2"},"source":["# Streamlit"]},{"cell_type":"code","metadata":{"id":"BGfXmLOwM3Uz"},"source":["!pip install streamlit pyngrok"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ze0GjZpLOzvJ","executionInfo":{"status":"ok","timestamp":1619705035603,"user_tz":-180,"elapsed":949,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"8f7327ea-3d8d-43ca-e68b-a305fd2f81c1"},"source":["%%writefile app.py\n","import streamlit as st\n","import numpy as np\n","import pandas as pd\n","\n","import streamlit as st\n","import pandas as pd\n","import numpy as np\n","\n","st.title('Uber pickups in NYC')\n","\n","DATE_COLUMN = 'date/time'\n","DATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n","            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n","\n","@st.cache\n","def load_data(nrows):\n","    data = pd.read_csv(DATA_URL, nrows=nrows)\n","    lowercase = lambda x: str(x).lower()\n","    data.rename(lowercase, axis='columns', inplace=True)\n","    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\n","    return data\n","\n","data_load_state = st.text('Loading data...')\n","data = load_data(10000)\n","data_load_state.text(\"Done! (using st.cache)\")\n","\n","if st.checkbox('Show raw data'):\n","    st.subheader('Raw data')\n","    st.write(data)\n","\n","st.subheader('Number of pickups by hour')\n","hist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\n","st.bar_chart(hist_values)\n","\n","# Some number in the range 0-23\n","hour_to_filter = st.slider('hour', 0, 23, 17)\n","filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\n","\n","st.subheader('Map of all pickups at %s:00' % hour_to_filter)\n","st.map(filtered_data)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Overwriting app.py\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gosQSwayyo59","executionInfo":{"status":"ok","timestamp":1619702564502,"user_tz":-180,"elapsed":647,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"03b2a55f-a401-4e4e-884e-1457e92518ef"},"source":["%%writefile run_streamlit.sh\n","streamlit run /content/app.py &>/dev/null&\n","npx localtunnel --port 8501"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Writing run_streamlit.sh\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RMow_E7Ny5NY"},"source":["!chmod +x ./run_streamlit.sh"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMvUqdeAt6Ll"},"source":["# !pip install streamlit\n","# !npm install localtunnel"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XPqEGMAjT6oB","executionInfo":{"status":"ok","timestamp":1619702366778,"user_tz":-180,"elapsed":34647,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"ac98487f-d190-4caf-edf8-f81dfd10ad75"},"source":["# !streamlit run /content/app.py &>/dev/null&\n","# !npx localtunnel --port 8501"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K\u001b[?25hnpx: installed 22 in 2.799s\n","your url is: https://brown-penguin-89.loca.lt\n","^C\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z06TGTbIxiiv","executionInfo":{"status":"ok","timestamp":1619702217208,"user_tz":-180,"elapsed":1046,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"4c150f64-3b0a-4766-df31-5b2a6d98c166"},"source":["!pwd "],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":128},"id":"xk9eitEExoqI","executionInfo":{"status":"error","timestamp":1619702229668,"user_tz":-180,"elapsed":654,"user":{"displayName":"dim web","photoUrl":"","userId":"03939316973290678021"}},"outputId":"f93885c0-72bb-4539-bbba-359a4ec2a98d"},"source":["/content/app.py"],"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-19-a7c9d3dcfe6d>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    content(/app.py)\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]}]}