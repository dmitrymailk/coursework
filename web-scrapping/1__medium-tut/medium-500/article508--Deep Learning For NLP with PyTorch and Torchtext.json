{"title": "Deep Learning For NLP with PyTorch and Torchtext", "data": [{"type": "subtitle", "content": "Torchtext\u2019s Pre-trained Word Embedding, Dataset API, Iterator API, and training model with Torchtext and PyTorch"}, {"type": "sentence", "content": "PyTorch has been an awesome deep learning framework that I have been working with. However, when it comes to NLP somehow I could not found as good utility library like torchvision. Turns out PyTorch has this torchtext, which, in my opinion, lack of examples on how to use it and the documentation [6] can be improved. Moreover, there are some great tutorials like [1] and [2] but, we still need more examples."}, {"type": "sentence", "content": "This article\u2019s purpose is to give readers sample codes on how to use torchtext, in particular, to use pre-trained word embedding, use dataset API, use iterator API for mini-batch, and finally how to use these in conjunction to train a model."}, {"type": "subtitle", "content": "Pre-Trained Word Embedding with Torchtext"}, {"type": "sentence", "content": "There have been some alternatives in pre-trained word embeddings such as Spacy [3], Stanza (Stanford NLP)[4], Gensim [5] but in this article, I wanted to focus on doing word embedding with torchtext."}, {"type": "subtitle", "content": "Available Word Embedding"}, {"type": "sentence", "content": "You can see the list of pre-trained word embeddings at torchtext. At this time of writing, there are 3 pre-trained word embedding classes supported: GloVe, FastText, and CharNGram, with no additional detail on how to load. The exhaustive list is stated here, but it took me sometimes to read that so I will layout the list here."}, {"type": "sentence", "content": "There are two ways we can load pre-trained word embeddings: initiate word embedding object or using Field instance."}, {"type": "sentence", "content": "Using Field Instance"}, {"type": "sentence", "content": "You need some toy dataset to use this so let\u2019s set one up."}, {"type": "sentence", "content": "then we can construct Field objects that hold metadata of feature column and label column."}, {"type": "sentence", "content": "to get the real instance of pre-trained word embedding, you can use"}, {"type": "sentence", "content": "Initiate Word Embedding Object"}, {"type": "sentence", "content": "FastText"}, {"type": "sentence", "content": "FastText object has one parameter: language, and it can be \u2018simple\u2019 or \u2018en\u2019. Currently they only support 300 embedding dimensions as mentioned at the above embedding list."}, {"type": "sentence", "content": "CharNGram"}, {"type": "sentence", "content": "GloVe"}, {"type": "sentence", "content": "GloVe object has 2 parameters: name and dim. You can look up the available embedding list on what each parameter support."}, {"type": "subtitle", "content": "Using Word Embedding"}, {"type": "sentence", "content": "Using the torchtext API to use word embedding is super easy! Say you have stored your embedding at variable embedding, then you can use it like a python\u2019s dict."}, {"type": "sentence", "content": "As you can see, it has handled unknown token without throwing error! If you play with encoding the words into an integer, you can notice that by default unknown token will be encoded as 0 while pad token will be encoded as 1 ."}, {"type": "subtitle", "content": "Using Dataset API"}, {"type": "sentence", "content": "Assuming variable df has been defined as above, we now proceed to prepare the data by constructing Fieldfor both the feature and label."}, {"type": "subtitle", "content": "Using Iterator Class for Mini-batching"}, {"type": "sentence", "content": "I do not found any ready DatasetAPI to load pandas DataFrameto torchtext dataset, but it is pretty easy to form one."}, {"type": "sentence", "content": "we can now construct the DataFrameDatasetand initiate it with the pandas dataframe."}, {"type": "sentence", "content": "we then use BucketIteratorclass to easily construct minibatching iterator."}, {"type": "sentence", "content": "Remember to use sort=False otherwise it will lead to an error when you try to iterate test_iter because we haven\u2019t defined the sort function, yet somehow, by default test_iter defined to be sorted."}, {"type": "subtitle", "content": "Example in Training PyTorch Model"}, {"type": "sentence", "content": "Let\u2019s define an arbitrary PyTorch model using 1 embedding layer and 1 linear layer. In the current example, I do not use pre-trained word embedding but instead I use new untrained word embedding."}, {"type": "sentence", "content": "Then I can easily iterate the training (and testing) routine as follows."}, {"type": "subtitle", "content": "Reusing The Pre-trained Word Embedding"}, {"type": "sentence", "content": "It is easy to modify the current defined model to a model that used pre-trained embedding."}, {"type": "sentence", "content": "I made 3 lines of modifications. You should notice that I have changed constructor input to accept an embedding. Additionally, I have also change the view method to reshape and use get operator [] instead of call operator () to access the embedding."}, {"type": "subtitle", "content": "Conclusion"}, {"type": "sentence", "content": "I have finished laying out my own exploration of using torchtext to handle text data in PyTorch. I began writing this article because I had trouble using it with the current tutorials available on the internet. I hope this article may reduce overhead for others too."}, {"type": "sentence", "content": "You need help to write this code? Here\u2019s a link to google Colab."}, {"type": "subtitle", "content": "References"}, {"type": "sentence", "content": "[1] Nie, A. A Tutorial on Torchtext. 2017. http://anie.me/On-Torchtext/"}, {"type": "sentence", "content": "[2] Text Classification with TorchText Tutorial. https://pytorch.org/tutorials/beginner/text_sentiment_ngrams_tutorial.html"}, {"type": "sentence", "content": "[3] Stanza Documentation. https://stanfordnlp.github.io/stanza/"}, {"type": "sentence", "content": "[4] Gensim Documentation. https://radimrehurek.com/gensim/"}, {"type": "sentence", "content": "[5] Spacy Documentation. https://spacy.io/"}, {"type": "sentence", "content": "[6] Torchtext Documentation. https://pytorch.org/text/"}], "topic": "artificial-intelligence"}