{"title": "Pickling in Python", "data": [{"type": "sentence", "content": "Unpickling Pickle"}, {"type": "image", "content": "https://miro.medium.com/max/1920/0*W95js5MTxqJB287C"}, {"type": "sentence", "content": "When you think about pickles in the real world, a jar full of small cucumbers or some other vegetable immersed in a vinegary brine probably comes to mind. And if you take a moment to ponder pickles a bit further, a few additional thoughts may come to mind \u2014 for one, pickles are delicious, but two, the process of pickling is all about preserving for later use and extending the shelf life of a food."}, {"type": "sentence", "content": "The Pickle in Python is more or less the same idea, preserving Python objects for later use."}, {"type": "sentence", "content": "I was first introduced to Pickle when I started diving into Machine Learning algorithms and creating my own models. Pickle allows you to preserve your model that you\u2019ve just trained, fit and tested to predict on new data at a later time. This is particularly useful if your model took hours to train \u2014 instead of having to train it again, you can just preserve (pickle) it and unload it for immediate use! So, how exactly does it work and why?"}, {"type": "sentence", "content": "In technical terms, the Python pickle is a Python module used to serialize (and deserialize) an object structure into (and from) a byte stream. Essentially, serializing an object means to transform it in a format that can be stored, and then deserialized later, recreating the original object from the serialized format. The character (byte) stream contains all the information necessary to reconstruct the object in another python script."}, {"type": "subtitle", "content": "Pickle (serialize) example"}, {"type": "sentence", "content": "In the above code snippet , on line 3, the model object was converted to a binary format and stored. I first used dump(), which takes two arguments: the object to pickle and the file to which the object has to be saved. In the second argument, I also simultaneously opened the file for writing, using the open() function. And within this function, the first argument is setting the name of the file. The second argument is \u2018wb\u2019. The w means that you\u2019ll be writing to the file, and b refers to binary mode \u2014 \u201cwrite binary\u201d. This means that the data will be written in the form of byte objects."}, {"type": "sentence", "content": "Now, a new file named model.pkl will appear in the same directory as the Python script."}, {"type": "subtitle", "content": "Unpickling (deserialize) example"}, {"type": "sentence", "content": "The process of loading, unpickling, the pickled object back into a Python program is similar. Again, theopen() function is used, but this time with 'rb' . The r refers to read, b refers to binary mode \u2014 thus, the data is being deserialized from the byte stream,(read binary)."}, {"type": "subtitle", "content": "Other use cases and when not to use Pickle"}, {"type": "sentence", "content": "According to the Pickle module documentation, the following types can be pickled:"}, {"type": "sentence", "content": "It should also be noted that there are instances when Pickle should not be used. One major takeaway here is that if you want to use data across different programming languages, Pickle\u2019s protocol is specific to Python so Pickle should not be used."}, {"type": "sentence", "content": "Additionally, generators, inner classes, and lambda functions cannot be pickled with Pickle. There are some workarounds here, for example, in the case of lambda functions, an additional package known as dill will need to be used."}, {"type": "subtitle", "content": "Concluding thoughts"}, {"type": "sentence", "content": "Python\u2019s pickle module is incredibly useful to convert an object hierarchy to a stream of bytes that can be saved to a disk or transmitted over a network. However, the below warning must be kept in mind during deserialization as noted on the Pickle module documentation \u2014"}, {"type": "sentence", "content": "This is an important word of warning to keep in mind when unpickling data that you did not pickle. There is no processing or interpretation of the Python object as its pickled or unpickled, so it is essential to be cautious around unpickling a file of unknown origin."}, {"type": "sentence", "content": "Python also offers two other modules that allow you to serialize and deserialize objects:"}, {"type": "subtitle", "content": "Resources"}], "topic": "data-science"}