{"title": "Assertive Programming in R", "data": [{"type": "subtitle", "content": "Your code should work as intended or fail immediately"}, {"type": "sentence", "content": "You might be familiar with unit testing using the testthat package. The goal of unit tests is to check if your function is developed correctly. An assertion checks if your function is used correctly."}, {"type": "image", "content": "https://miro.medium.com/max/2000/0*e-wobHH2dZcjxrcZ"}, {"type": "subtitle", "content": "Fail fast"}, {"type": "sentence", "content": "A run-time test, commonly known as an assertion, is a tiny piece of code that checks a condition and fails if the condition isn\u2019t met. Assertions enable your code to fail fast \u2014 and that\u2019s a good thing. When something is off we don\u2019t want our program to continue until the error compounds and reveals itself down the line. On the contrary, we want the program to fail immediately at the source of the error with a clear and precise error message."}, {"type": "sentence", "content": "This goal of this article is to make your R functions fail fast. Assuming your function has no bugs or side-effects, the only way an error can creep into your function is through its input. In this article, you will learn how to use assertions to recognize bad input and warn the user (including future you)."}, {"type": "sentence", "content": "There are two ways for input to be bad:"}, {"type": "subtitle", "content": "Why the R package \u201cassertive\u201d"}, {"type": "sentence", "content": "R has several packages for writing assertions. This article advocates the R package assertive for three reasons:"}, {"type": "sentence", "content": "assert_all_are_positive(c(1, -2, 3))"}, {"type": "sentence", "content": "3. and provide highly informative error messages"}, {"type": "sentence", "content": "Install the package directly from CRAN and load it into your R session:"}, {"type": "sentence", "content": "install.packages(\"assertive\")"}, {"type": "sentence", "content": "library(assertive)"}, {"type": "subtitle", "content": "Writing your first assertion"}, {"type": "sentence", "content": "Imagine you wrote a function that sums the elements of a numeric vector:"}, {"type": "sentence", "content": "The values of the vector are allowed to be anything as long as they are numbers. Let\u2019s write an assertion at the beginning of the function to check our input vector:"}, {"type": "sentence", "content": "Note that assertion is written inside the function. This means it\u2019s always there, waiting to be executed each time the function is called. Checking an assertion only takes a couple of milliseconds which is fine for all but the most performance-critical applications."}, {"type": "subtitle", "content": "Checking multiple conditions"}, {"type": "sentence", "content": "Imagine you modified your function to expect a vector of unique values. Now you need two assertions:"}, {"type": "sentence", "content": "You can keep your code readable by chaining two or more assertions with the forward pipe %>% from the magrittr package:"}, {"type": "sentence", "content": "There are a lot of assertive functions for a wide range of cases. It\u2019s not practical to memorize them all. Just search the package documentation on CRAN to find a function that suits your particular need."}, {"type": "sentence", "content": "Let\u2019s try this with an exercise. The function below expects a vector of percentage values, e.g.percentages <- c(64, 55, 97, 85) and computes the mean percentage. Can you find an appropriate assertion in the assertive package?"}, {"type": "sentence", "content": "Tip: write ls(\"package:assertive\", pattern = \"percent\") in your R console to search for functions in the assertive whose name matches \u201cpercent\u201d."}, {"type": "subtitle", "content": "Of assertions and predicates"}, {"type": "sentence", "content": "You may start to see a pattern here. All assertions are composed of three parts:"}, {"type": "sentence", "content": "The predicate is_ changes to all_are_ or any_are_ in when the individual elements of an object are checked instead of the object itself. For example, the assertion below checks if all numbers passed to the function are whole numbers:"}, {"type": "subtitle", "content": "Beyond checking numbers"}, {"type": "sentence", "content": "So far we\u2019ve only dealt with numbers. But the assertive package contains assertions for all kind of cases. To illustrate, we\u2019ll finish our discussion with some examples to check text, dates and even the host operating system."}, {"type": "sentence", "content": "assert_all_are_non_missing_nor_empty_character()"}, {"type": "sentence", "content": "assert_is_windows()"}, {"type": "sentence", "content": "assert_is_in_past()"}, {"type": "subtitle", "content": "Conclusion"}, {"type": "sentence", "content": "In this article, you learned how to write assertions using the assertive package. Thanks to assertions your functions will do what they are supposed to do or fail fast with a clear error message."}, {"type": "subtitle", "content": "References"}, {"type": "sentence", "content": "Cotton, Richard. (2017). Testing R code (1st Edition). Chapman & Hall."}, {"type": "sentence", "content": "Hunt, Andrew. Thomas, Dave. (1999). The Pragmatic Programmer (25th Printing, February 2010). Addison Wesley Longman, Inc."}], "topic": "data-science"}