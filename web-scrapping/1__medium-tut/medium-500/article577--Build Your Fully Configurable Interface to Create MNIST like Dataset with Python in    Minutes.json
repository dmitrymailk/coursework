{"title": "Build Your Fully Configurable Interface to Create MNIST-like Dataset with Python in 10 Minutes", "data": [{"type": "subtitle", "content": "Step by step user-friendly python interface to write a dataset from a JSON configuration file (with code)"}, {"type": "image", "content": "https://miro.medium.com/max/1200/1*AtdEr-6-fMciD8IIQ-RLvg.gif"}, {"type": "subtitle", "content": "Motivations"}, {"type": "sentence", "content": "For a personal project and maybe a paper (fingers crossed), I need to create a MNIST-like dataset. I thought it could be useful for others. I will, therefore, explain how I coded this interface with Python. (github repository)"}, {"type": "sentence", "content": "The purpose of this article is to be able to design its own interface as flexible and fast as possible. This interface will allow us to draw our characters with the mouse and everything else will be done automatically with a large choice of parameters specified in a configuration file."}, {"type": "subtitle", "content": "Fully configurable"}, {"type": "sentence", "content": "I was looking for a fully configurable interface from a JSON file. No more need to touch the code, it is flexible, convenient and scalable. We will come back throughout this article on the different parameters but everything is contained in the file I named config.json. You are free to name it as you wish. It allows you to change:"}, {"type": "subtitle", "content": "Storage and utilities"}, {"type": "sentence", "content": "First things first. We need to know how we will organize our data. In the file config.json we have the storage part:"}, {"type": "image", "content": "https://miro.medium.com/max/1920/1*k-J6H363dHu_ZyrLpdwPvw.png"}, {"type": "sentence", "content": "All our images will have the same pattern. The name of the image will always start with the name of the class. Then an underscore and then a 5 character number to identify it. So we have a root/(subfolderclass)/name_id.png format."}, {"type": "sentence", "content": "You will notice the id\u2019s are set incrementally. In other words you can see how many images for each class is already generated. However as a user you may or may not need to place other files in these folders or sometimes delete images or rename them. We will put at the beginning of our code a small part to reorder our image names automatically."}, {"type": "image", "content": "https://miro.medium.com/max/1920/1*ZiQmqjv3iEfFBbfqlCOaBQ.png"}, {"type": "sentence", "content": "In a utils.py we set up some functions :"}, {"type": "subtitle", "content": "Designer"}, {"type": "sentence", "content": "What we want is to be able to draw our characters by hand (mouse). From a drawing window we want to quickly create our dataset. Then we need a class Designer which we will be stored in the designer.py file. To understand why we need this class, let\u2019s take a closer look at some parameters in our configuration file:"}, {"type": "image", "content": "https://miro.medium.com/max/1200/1*AtdEr-6-fMciD8IIQ-RLvg.gif"}, {"type": "sentence", "content": "Note the drawing will be done by line composition. Hence the role of the draw(self, pt_1, pt2). So we still have to be able to control all this with the mouse."}, {"type": "subtitle", "content": "Controller"}, {"type": "sentence", "content": "First of all we need to create a class Controller and initialize it from the configuration dictionary."}, {"type": "sentence", "content": "During the initialization several things happen:"}, {"type": "sentence", "content": "To create all our designers there will be a designer matrix with the vertical for pencil thicknesses and the horizontal for interpolation methods. At the same time we can create a function to catch mouse events on the drawing window. You can only draw with the left mouse button pressed. Finally you can retrieve the number of images already drawn."}, {"type": "subtitle", "content": "Let\u2019s draw"}, {"type": "image", "content": "https://miro.medium.com/max/1200/1*EDIOtLm2LDcXjARso3aDJw.gif"}, {"type": "sentence", "content": "Before we can draw let\u2019s have a look at what our last parameters propose in process:"}, {"type": "sentence", "content": "You can now create a new image to draw, draw it and save it in the right format (root/(subfolderclass)/name_id.png)."}, {"type": "sentence", "content": "All that remains is to be able to view everything from the OpenCV window and to run the program as long as the image volume per class is not reached."}, {"type": "subtitle", "content": "Main"}, {"type": "sentence", "content": "Finally for more convenience we can leave the choice to the user to specify his configuration file with the command in the shell:"}, {"type": "sentence", "content": "I hope this can be useful for you, too.Feel free to follow me or give me feedback on what you liked or disliked. \u270f\ufe0fSee you very soon! \ud83d\ude18"}, {"type": "subtitle", "content": "Sources"}, {"type": "sentence", "content": "Github repository of the project"}, {"type": "sentence", "content": "Everything is homemade and free to use"}], "topic": "data-science"}