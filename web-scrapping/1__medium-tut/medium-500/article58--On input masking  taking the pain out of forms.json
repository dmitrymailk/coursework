{"title": "On input masking: taking the pain out of forms", "data": [{"type": "subtitle", "content": "So what? \ud83d\ude15"}, {"type": "sentence", "content": "A form is, at its core, a series of inputs into a database. Yet users don\u2019t always fill out inputs the same way \u2014 even with clear prompts. If users enter invalid data, affirm stodgy database architects, it\u2019s their fault for not following ostensibly clear instructions. This assumption is as haughty as it is common. Indeed, an average of 89 percent of users enter input numerical data based on personal preference rather than as it appears in an input field."}, {"type": "sentence", "content": "When the overwhelming majority of users make a mistake, it\u2019s not a mistake; it\u2019s an intuition unaccounted for in the form\u2019s design. The assumptions underlying that design must change to accommodate the behavior, not vice-versa."}, {"type": "subtitle", "content": "The Wisdom of Forms \ud83e\udd89"}, {"type": "sentence", "content": "The global shift from paper to digital pages has done nothing to remove forms from our lives. Forms have come a long way since Roman surveyors recorded property boundaries on tablets. In the early days of graphical user interfaces, when computers had moved beyond the DOS-like command line into grayscale GUIs, forms closely resembled their paper predecessors. Empty input fields with little to no validation, they did little to prevent user input errors. The silver lining, of course, was that typed input was at least legible."}, {"type": "sentence", "content": "We\u2019ve had a go at collecting and standardizing forms for a few millennia, and over that time a few things have come clear:"}, {"type": "sentence", "content": "I\u2019ve distilled these into six lessons \u2014 six because it\u2019s a bare minimum for what I consider best practice for form inputs. Afterwards, I provide a bunch of code prototypes that put these lessons into practice; feel free to borrow them for your own projects."}, {"type": "subtitle", "content": "Lesson 1: Reconsider What\u2019s in a Name"}, {"type": "sentence", "content": "A bone of contention among designers is the ideal way to enter a user\u2019s full name. Forms designed for English speakers split names into three parts: first name, middle name or initial, and last name."}, {"type": "sentence", "content": "A more recent trend condenses these parts into a single field that separates them again with a string parser. Efficient though it may seem, running a parser over a \u201cfull name\u201d input field is risky. How does the parser handle hyphenation or compound surnames? Can it accept a middle name? Does it accommodate users without traditional middle names? What about orthographic accents to denote exceptions to standard syllabic pronunciation?"}, {"type": "sentence", "content": "How, for example, might a full name parser manage naming customs in Spanish or Portuguese-speaking countries? Though customs vary by region, Hispanophones (and Lusophones, with some differences) generally receive two first names, an optional middle name, and paternal and material surnames. The combination of compound surnames and prepositional particles, such as \u201cy\u201d or \u201cde,\u201d yield names easily capable of overwhelming all but the most carefully crafted parser."}, {"type": "sentence", "content": "An Anglocentric string parser would interpret Francisco G\u00f3mez de Quevedo y Santib\u00e1\u00f1ez Villegas, a seventeenth-century Spanish poet, as \u201cFrancisco Villegas\u201d rather than Francisco de Quevedo. Briefer names, like Gabriel Garc\u00eda M\u00e1rquez, would fare no better; Garc\u00eda M\u00e1rquez is a combination of his paternal and maternal surnames."}, {"type": "image", "content": "https://miro.medium.com/max/3832/1*79rzqHlZsoU5vyj8h8ifmw.png"}, {"type": "sentence", "content": "Sure, nobody expects a parser to make sense of names like that of the hapless last king of Portugal, Manuel Maria Filipe Carlos Am\u00e9lio Lu\u00eds Miguel Rafael Gabriel Gonzaga Xavier Francisco de Assis Eug\u00e9nio de Bragan\u00e7a Orle\u00e3es Sab\u00f3ia e Saxe-Coburgo-Gotha. Most people refer to him as \u201cManuel\u201d and tack on \u201cthe Unfortunate\u201d as a sobriquet, his misfortune having nothing to do with the algorithm that compresses his name into \u201cManuel Saxe-Coburgo-Gotha.\u201d"}, {"type": "sentence", "content": "To keep things simple, keep them separate. Always include a first and last name field, and an optional field for the user\u2019s middle name or initial. If you\u2019re masking the field\u2019s input, allow for multiple names, hyphens, spaces, inter-word separators, and orthographic accents."}, {"type": "subtitle", "content": "Lesson 2: It\u2019s Better to Prevent than to Fix \ud83d\udee1\ufe0f\ud83d\udd27"}, {"type": "sentence", "content": "Asking for too much information has always been annoying, but it\u2019s also costly. No less than 23% of online shoppers abandon a checkout flow because it\u2019s too long \u2014 with an average of 23.48 form elements. (Around 53% leave off because of costs and 31% do the same because the site tethers feature usage to creating an account)."}, {"type": "sentence", "content": "Flow abandonment is the designer\u2019s worst nightmare; it suggests a lack of understanding of, or worse, a lack of respect for the user. Keep form flows brief by asking the bare minimum needed for the user to complete a task. You can always ask for more information elsewhere or later."}, {"type": "subtitle", "content": "Lesson 3: Don\u2019t Ask for Everything at Once"}, {"type": "sentence", "content": "Nowadays, conversational UX is de rigueur. There are conversational onboarding flows to make users feel welcome and conversational chatbots to mollify them when facing a problem. There\u2019s conversational copy, conversational ads, and yes, conversational forms, too. Stilted professional language is out, replaced with casual tones that sometimes verge on banter."}, {"type": "sentence", "content": "The etymology of \u201cconversation\u201d gives us clues as to what the term might mean, and it\u2019s not just scrapping formalities. Conversation literally means to \u201ckeep company with\u201d (con, or \u201cwith\u201d and \u201cversare,\u201d the Latin frequentative of vertere, \u201cto turn\u201d) at least one other person. A mutual turning together, conversations are by definition interactive, entailing a back-and-forth of ideas or information."}, {"type": "sentence", "content": "Conversations tend to treat things one at a time; otherwise, they end in awkwardness. At a cocktail party, you\u2019d scare off the guests if you asked for everyone\u2019s details all at once or in no sensible order. So it is with digital forms. Assuming the user wants to surrender his or her data, ask for one thing at a time in a way that makes sense \u2014 names before payment information, etc. It also makes sense to organize questions seriatim, either in a single-column layout split across a few pages (hopefully just a few) into a stepper with a progress indicator that displays one question per screen."}, {"type": "subtitle", "content": "Lesson 4: Assume Nothing. Oh, and Give Examples."}, {"type": "sentence", "content": "Labels and placeholder text can make or break an input field. Labels should be succinct \u2014 two or three words at most \u2014 and sit above the input field. Never use placeholder text as a label. Very light gray text doesn\u2019t call attention to itself and may be difficult for some users to read. Worse, placeholder text vanishes the moment the user clicks inside the input field."}, {"type": "sentence", "content": "Shorn of a label above, the input field becomes a box with a blinking cursor. When space is a premium, floating labels are a viable alternative as long as you account for accessibility."}, {"type": "image", "content": "https://miro.medium.com/max/3840/1*FXY_pI1OC_KVrcMWHjfmBQ.png"}, {"type": "sentence", "content": "Placeholder text is key to giving the user context about what kind of input to enter. It works best when written as a question or by supplying an example. If the label reads \u201cFirst Name,\u201d the placeholder text might ask, \u201cWhat\u2019s your first name?\u201d Those unfamiliar with ZIP Codes, such as newcomers to the United States, would benefit from a placeholder like \u201ce.g., 94110.\u201d Well-crafted placeholders are more than just a gimmick: blind or visually impaired users rely on assistive technologies to read placeholder text."}, {"type": "image", "content": "https://miro.medium.com/max/3840/1*SFgdFGcRcH7XfRiDAqeJ9w.png"}, {"type": "sentence", "content": "Buttons should never read \u201cSubmit\u201d \u2014 a verb as threatening as it is vague. It\u2019s only fair that after putting in the effort to complete a form, users know what completing the form actually means."}, {"type": "sentence", "content": "Clicking a button performs an action the user should expect. \u201cCreate Account,\u201d \u201cSend Message,\u201d and \u201cSubscribe\u201d are all familiar actions for anyone who\u2019s used the Internet. They also give a clear indication of what clicking on the button at the end of the form will do."}, {"type": "image", "content": "https://miro.medium.com/max/3968/1*hcTnQjIuA_sWzv_nERiO7Q.png"}, {"type": "subtitle", "content": "Lesson 5: Accommodate Multiple Genders."}, {"type": "sentence", "content": "Western culture has traditionally considered everyone to be either male or female. The binary between man and woman, the masculine and the feminine, has long been considered as natural and self-explanatory as the weather."}, {"type": "sentence", "content": "More recently, gender theorists have pointed out what should have been obvious all along: how we talk about the sexes has little to do with biology. We even have separate words to handle the distinction: sex and gender. Gender is the social construction of sex, and while sex follows the glacial pace of evolution, gender is fluid, its shape formed in the cultural tides. These tides shift with each generation, sometimes sooner, and so it is that gender non-binarism became a cultural mainstay in the 2010s. (Official recognition is another matter.)"}, {"type": "sentence", "content": "As with algorithms, a form reifies its designer\u2019s assumptions. Common among them is to drop a pair of radio buttons, \u201cMale\u201d and \u201cFemale,\u201d that allow users to select a gender. This binarism is long enshrined in law and public policy, a not-so-tacit refusal to recognize non-binary gender identities. Still, in the United States as of late 2019, some seven states recognize gender fluidity officially by including \u201cnon-binary\u201d (versus \u201cmale\u201d and \u201cfemale\u201d) and \u201cX\u201d (versus \u201cM\u201d and \u201cF\u201d) on certain legal documents. No one should be surprisd that political identification plays an outsized role in support for legal recognition of non-binary people."}, {"type": "sentence", "content": "What happens at the state house needn\u2019t determine how designers or the organizations they represent handle gender: making a small adjustment to accommodate more users makes good business sense. For the designer working at a consumer SaaS startup, tailoring profiles and onboarding flows to non-binary users is a product decision that varies widely between organizations; for the designer working at an organization in a highly regulated industry, such as health care, making room for those who identify as non-binary may be considerably harder."}, {"type": "sentence", "content": "Yet even when users are forced to identify as male or female, they can resort to creative workarounds. Blue Shield of California added a non-binary option following the ratification of the California Gender Recognition Act in 2017, while OneMedical, a boutique medicine practice, allows users to qualify their gender even while requiring them to identify as male or female. The availability and cost of medical care in the United States hinges on one\u2019s biological sex, something the federal and most state and local governments conflate with gender identity."}, {"type": "sentence", "content": "Sometimes the best way of avoiding gender bias on a form is not to ask about it at all. Regulations may require the user to indicate a gender as a precondition to receiving a particular service, but not always. In that case, and in the spirit of keeping forms short, omit the question about gender altogether."}, {"type": "subtitle", "content": "Lesson 6: Garbage In, Garbage Out."}, {"type": "sentence", "content": "Approximately 98 percent of e-commerce sites place restrictions on inputs for specific fields, such as phone numbers or ZIP codes. Validating errors based on these restrictions can vary widely. At least five interaction patterns prevail:"}, {"type": "sentence", "content": "Take, for instance, the variability in entering a now-defunct phone number in Pima County, Arizona:"}, {"type": "sentence", "content": "The complexity of these combinations grows when prepended with a country code (1 or +1) and an extension. And it can balloon depending on the restrictions placed on the input field. Let\u2019s review a form containing five input fields designed to accept a phone number in the United States:"}, {"type": "sentence", "content": "The first pattern is as effortless \u2014 as in, no effort made \u2014 as it is unforgivable. It\u2019s also (fortunately) rare and therefore not worth further discussion. The second and third patterns, though, are more worrisome: 64% of e-commerce sites rely on these patterns, of which some are justified. A website without a portal that sorts incoming traffic by country can\u2019t place meaningful restrictions on the length of a phone number."}, {"type": "sentence", "content": "Those in the United States are a reliable 10 digits, while in Germany, which maintained an open telephone number system until 2010, they can range between five and 11 digits. Patterns four and five entail significant effort and are only worth it if they match regional conventions (e.g., a five-digit ZIP code) and can handle editing in the middle of the string. Otherwise, they\u2019re not worth the effort."}, {"type": "sentence", "content": "Technical glitches or errors borne of rickety assumptions can frustrate users into abandoning a form flow. Left unaddressed, organizations may see spikes in customer support inquiries and declines in revenue and NPS scores."}, {"type": "subtitle", "content": "Demos \ud83d\udc83"}, {"type": "sentence", "content": "If you\u2019re going to mask and validate input on your site (or app), start with the basics, the kind of data every user must provide as a precondition to signing up, signing in, or accessing his or her account. The fate of e-commerce sites, for example, hinges on the quality of their checkout flow. Asking for too many details or requiring too many steps is a recipe for abandonment. So is placing masking and validations on fields that confuse the user rather than ease their journey through the flow."}, {"type": "subtitle", "content": "Two Suggestions \u261d\ufe0f"}, {"type": "sentence", "content": "Just kidding: before diving into specific types of masking, I\u2019ve found that two types of event listener work well between different scenarios for masking and validation:"}, {"type": "sentence", "content": "Now onto masking!"}, {"type": "subtitle", "content": "Names \ud83d\udcdb"}, {"type": "sentence", "content": "First, middle, and last names should allow for orthographic accents, hyphenation, and compound words. With a few exceptions, such as \u201cde\u201d or \u201cvon,\u201d names are capitalized. Name fields should also contain a few restrictions:"}, {"type": "subtitle", "content": "Passwords \ud83d\udd10"}, {"type": "sentence", "content": "Passwords, I hope, will soon become pass\u00e9, supplanted by better alternatives like Slack\u2019s magic link. Until then, we\u2019ll be saddled with passwords whose complexity seems to balloon quicker than the national debt. Length, variety, and randomness are all ingredients in strong passwords\u2014\u201cstrong\u201d meaning impossible to guess and tedious to crack with brute force attempts. Though I\u2019m partial to pass phrases, a common formula for strong passwords is a minimum of 8 characters in length and a mix of capitalized letters, numbers, and special characters."}, {"type": "sentence", "content": "It helps to give users feedback when creating a password of this sort with a progress bar or another indicator rather than leave them guessing until a general error message tells them where they\u2019ve gone astray. Also, unless absolutely necessary, allow users to toggle the password field\u2019s visibility rather than require users to enter their password twice. Less is more."}, {"type": "sentence", "content": "Here\u2019s the code in vanilla HTML, CSS, and JavaScript \u2014 vendor prefixes and all \u2014 you\u2019ll need to set up client-side password masking (more on validation for different types of HTML fields in a bit):"}, {"type": "subtitle", "content": "Email \u2709\ufe0f"}, {"type": "sentence", "content": "HTML5 includes a wide array of input types that Regular Expressions can validate with the HTMLSelectElement.checkValidity() method. Popular among them is email, or <input type=\"email\">, given the centrality of email in account management and user outreach. Email fields, however, only accept plain letters, numbers, and a handful of special characters, all specified in RFC 5322: Internet Message Format. But checkValidity() becomes useful after the user enters an email address, not while typing in the field."}, {"type": "subtitle", "content": "Phone Number \u260e\ufe0f"}, {"type": "sentence", "content": "Phone numbers, reviewed above, only come in certain combinations in the United States. The checkValidity() method works on phone numbers <input type=\"tel\">, too, and adjusts to international phone numbers based on the Regular Expression in the input field's pattern attribute."}, {"type": "subtitle", "content": "Social Security Number \ud83d\udd12"}, {"type": "sentence", "content": "In the United States, Social Security Numbers (SSN) remain, unfortunately, the main way of proving one\u2019s identity. This seems to have worked well through much of the twentieth century, but is now antiquated, a favorite tool of identity thieves. It\u2019s nonetheless a mainstay for governments and financial institutions. If you must ask users for their SSN, do so in a way that inspires trust: allow users to toggle its visibility and encrypt it once it enters your database. Better yet, don\u2019t ask for it in the first place."}, {"type": "subtitle", "content": "Percentage"}, {"type": "sentence", "content": "Creating a field that accepts a percentage raises a host of questions. Should it permit anything lower than 0% or higher than 100%? Should it accommodate decimal points? If so, how many? For input fields designed for percentages, I recommend allowing a range between 0% and 100% without decimals. In the JavaScript, updating the maxlength attribute in the HTML and changing 100 in if (Number(this.value.replace(/[$,%\\\\s]/g, '')) > 100) will allow for different uses of the field. To allow for decimals, add a full stop to this.value.replace(/[^\\\\d/]/, ''), or this.value.replace(/[^\\\\d\\\\./]/, '') . There's more to it, of course, but a full account of Regular Expressions in the String.prototype.replace() lies beyond the scope of this article."}, {"type": "subtitle", "content": "Currency \ud83d\udcb0"}, {"type": "sentence", "content": "A while back, in the face of a deadline, I quested after a simple way of automatically formatting numbers to display as current. The rules, I thought, were simple enough \u2014 a dollar sign prepended to the number, a separator for thousands, millions, and billions (that\u2019s enough for most use cases), and a decimal separator."}, {"type": "sentence", "content": "The main obstacle to getting this to work was the separators. The thousands separator would pop up as expected when any number exceeded 1,000, but wouldn\u2019t disappear if the number fell. Decimal points presented the same issue, and even when I managed to snuff out these bugs, the deadline loomed. I decided to split the difference by formatting the field to accept numbers, commas, and periods up to 16 characters and lean on a plugin, cleave.js, to do the heavy lifting. If someone has written a lightweight plugin in vanilla JavaScript, I surmised, there was no reason (other than personal edification) to continue tinkering. This hybrid approach did the trick:"}, {"type": "subtitle", "content": "ZIP Code \ud83d\uddfa"}, {"type": "sentence", "content": "ZIP Codes, or \u201cZone Improvement Plan Code,\u201d originated in large cities in the early 1940s and took on their current form in the 1960s. The USPS tacked on an additional four digits, sometimes called \u201cplus-four codes,\u201d in 1983, an optional add-on that pinpoints the location of an address."}, {"type": "sentence", "content": "Today ZIP Codes remain ubiquitous and, on web forms, often obviate the need to specify a city and state. Relative to other numbers, masking and validation for ZIP Codes is fairly straightforward. All that\u2019s needed is a block on all content types except for numbers and a hyphen that appears if the user tacks on a plus-four code. Trigger an error message if the field contains anything other than five numbers alone or with the four-digit add-on with a hyphen separating the two sequences."}, {"type": "subtitle", "content": "Icons and Shaking \ud83c\udfb2"}, {"type": "sentence", "content": "Error messaging is an art and science of its own. Needless to say that while error messages require thoughtful timing and presentation, above all they should tell the user what\u2019s wrong with the field input and giving them a sense of how to correct it\u2014a heuristic so sensible that it predates modern websites and apps."}, {"type": "sentence", "content": "Over and above error semantics, immediate visual feedback can signal whether input is correct or incorrect. For this, I\u2019ve used two methods:"}, {"type": "sentence", "content": "Both combine well with inline error messaging in small text below the field."}, {"type": "subtitle", "content": "Method 1: Icons"}, {"type": "subtitle", "content": "Method 2: Shaking"}, {"type": "subtitle", "content": "What Input Masking Can\u2019t Do"}, {"type": "sentence", "content": "For all its merits, input masking can\u2019t prevent users from making mistakes. Valid information isn\u2019t necessarily correct. Until artificial intelligence renders input fields obsolete, user interfaces can only do so much to prevent mistakes; a GUI can\u2019t solve problems for users any more than it can preclude them from entering incorrect data. Aside from confirmation, there\u2019s little point in asking for something you already have."}, {"type": "sentence", "content": "Input masking and client-side validation are more or less helpless against users familiar enough with code to be dangerous. Without server-side validations as backup (and they aren\u2019t enough, either), users need only open the Inspect Element browser tool and start editing attributes and patterns in HTML fields or the JavaScript itself. In the end, the thrust behind input masking is to make filling out form fields easier, not to block invalid information from entering the database. Even the best masking and validation can\u2019t always stop that from happening."}, {"type": "subtitle", "content": "Thanks for reading! \ud83d\ude4f"}, {"type": "sentence", "content": "Chris Kark is a Denver-based product designer with a background in teaching foreign languages and literatures. You can reach him at ckark@alumni.stanford.edu."}], "topic": "ux"}